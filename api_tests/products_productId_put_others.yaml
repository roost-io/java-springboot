# Test generated by RoostGPT for test demo25 using AI Type Open AI and AI Model gpt-4


# RoostTestHash=6762b8ac71

config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 5
  plugins:
    expect: {}
  payload:
    path: "./products_productId_put_others.csv"
    fields:
      - "id"
      - "name"
      - "description"
      - "price"
    skipHeader: true

scenarios:
  - name: "Test non-success API responses"
    flow:
      - put: 
          url: "/products/{{ id }}"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
          json:
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - statusCode: 404
            - hasProperty: "error"
            - equals: ["message", "Product not found"]
          capture:
            - json: "$.message"
              as: "errorMessage"
          think: 1

      - log: "Tested for product with id {{ id }}. Expected status code 404, got {{ response.statusCode }}. Error message: {{ errorMessage }}"

      - put: 
          url: "/products/invalid_id"
          headers:
            Content-Type: "application/json"
            Authorization: "Bearer {{$processEnvironment.AUTH_TOKEN}}"
          json:
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - statusCode: 404
            - hasProperty: "error"
            - equals: ["message", "Invalid product id"]
          capture:
            - json: "$.message"
              as: "errorMessage"
          think: 1

      - log: "Tested for invalid product id. Expected status code 404, got {{ response.statusCode }}. Error message: {{ errorMessage }}"

      - put: 
          url: "/products/{{ id }}"
          headers:
            Content-Type: "application/json"
          json:
            name: "{{ name }}"
            description: "{{ description }}"
            price: "{{ price }}"
          expect:
            - statusCode: 401
            - hasProperty: "error"
            - equals: ["message", "Unauthorized"]
          capture:
            - json: "$.message"
              as: "errorMessage"
          think: 1

      - log: "Tested for unauthorized request. Expected status code 401, got {{ response.statusCode }}. Error message: {{ errorMessage }}"
