// ********RoostGPT********
/*
Test generated by RoostGPT for test java-azure-openai using AI Type Azure Open AI and AI Model roostgpt-4-32k

1. Validate null input:
Check how the method reacts when null is passed as an argument for the name. The method behavior for handling null input should be defined in the context of the application.

2. Validate empty input:
Check how the method behaves with an empty string "". The method may not allow empty names.

3. Validate name length:
Check how the method behaves with a single character string, fully sized string or an oversized string. The method should have restrictions on maximum and minimum name length. 

4. Validate normal case:
Pass in a regular name (e.g., "John") and check if it properly sets the name. This should be the case most of the time in a real-world environment.

5. Validate special characters input:
Check how the method behaves when special characters are included in the name. Some special characters may not be allowed in the name.

6. Validate naming spaces: Check how setName method behaves with spaces at the beginning or the end, or multiple spaces in between words. Also, check setName method response when only spaces are passed.

7. Validate numbers in name: 
Check how setName method handles an input when numbers are part of the name, or the name is just a number.

8. Case sensitivity check:
Check whether the setName function handles case sensitivity correctly. The method might be required to keep the name case as it is or convert it to a specific case (lower or upper).

9. Validating with object setter:
After setting the name, retrieve it with the appropriate getter and verify if it matches with what was set.

10. Validate unicode characters:
Test with unicode character string, if unicode characters are expected in the name. 

These tests can be adjusted as per application requirements and constraints.
*/

// ********RoostGPT********
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class Product_setName_5d23a892d9_Test {

    private Product product;

    @BeforeEach
    public void setup() {
        product = new Product();
    }

    @Test
    public void whenNameIsNull_thenThrowIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> product.setName(null));
    }

    @Test
    public void whenNameIsEmpty_thenThrowIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> product.setName(""));
    }

    @Test
    public void whenNameIsSingleChar_thenShouldSet() {
        product.setName("A");
        assertEquals("A", product.getName());
    }

    @Test
    public void whenNameHasSpecialChar_thenThrowIllegalArgumentException() {
        assertThrows(IllegalArgumentException.class, () -> product.setName("@John!"));
    }

    @Test
    public void whenNameHasSpaces_thenShouldSet() {
        product.setName(" John Doe ");
        assertEquals("John Doe", product.getName());
    }

    @Test
    public void whenNameHasNumber_thenShouldSet() {
        product.setName("John123");
        assertEquals("John123", product.getName());
    }

    @Test
    public void whenNameIsLowerCase_thenShouldSet() {
        product.setName("john");
        assertEquals("john", product.getName());
    }

    @Test
    public void whenNameHasUnicodeCharacters_thenShouldSet() {
        product.setName("Jöhn\uD83D\uDE00");
        assertEquals("Jöhn\uD83D\uDE00", product.getName());
    }

}
