/*
Test generated by RoostGPT for test divyesh-java using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1: Null Name Input
- Input: Null
- Expected outcome: The name should not be set, possibly throw a NullPointerException.

Test Scenario 2: Empty String Input
- Input: ""
- Expected outcome: The name should not be set, possibly throw an IllegalArgumentException.

Test Scenario 3: Valid String Input 
- Input: "John Doe"
- Expected outcome: The name is set without error.

Test Scenario 4: White Spaces as Name Input
- Input: "   "
- Expected outcome: The name should not be set, possibly throw an IllegalArgumentException.

Test Scenario 5: Name Input with Special Characters
- Input: "@John"
- Expected outcome: Validate if the system allows special characters in the name. If not, an error should be thrown.

Test Scenario 6: Name with Numeric Values
- Input: "John123"
- Expected outcome: Validate if the system allows numeric values in the name. If not, an error should be thrown.

Test Scenario 7: Extremely Long String Input 
- Input: A String longer than expected max length 
- Expected outcome: The name should not be set, possibly throw an IllegalArgumentException.
*/
package com.bootexample4.products.model;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class Product_setName_5d23a892d9_Test {

    private Product productUnderTest;

    @BeforeEach
    public void setUp() {
        productUnderTest = new Product();
    }

    @Test
    public void testSetName_NullNameInput() {
        String name = null;
        assertThrows(NullPointerException.class, () -> productUnderTest.setName(name));
    }

    @Test
    public void testSetName_EmptyStringInput() {
        String name = "";
        assertThrows(IllegalArgumentException.class, () -> productUnderTest.setName(name));
    }

    @Test
    public void testSetName_ValidStringInput() {
        String name = "John Doe";
        productUnderTest.setName(name);
        assertEquals(name, productUnderTest.getName());
    }

    @Test
    public void testSetName_WhiteSpaceInput() {
        String name = "   ";
        assertThrows(IllegalArgumentException.class, () -> productUnderTest.setName(name));
    }

    @Test
    public void testSetName_SpecialCharInput() {
        String name = "@John";
        productUnderTest.setName(name);
        assertEquals(name, productUnderTest.getName());
    }

    @Test
    public void testSetName_NameWithNumbers() {
        String name = "John123";
        productUnderTest.setName(name);
        assertEquals(name, productUnderTest.getName());
    }

    @Test
    public void testSetName_ExtremelyLongString() {
        String name = new String(new char[1000]);
        assertThrows(IllegalArgumentException.class, () -> productUnderTest.setName(name));
    }
}
