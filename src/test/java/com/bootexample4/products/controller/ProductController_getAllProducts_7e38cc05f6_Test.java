// Test generated by RoostGPT for test java-dm-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

package com.bootexample4.products.controller;

import static org.mockito.Mockito.when;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;

import java.util.Arrays;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.bootexample4.products.model.Product;
import com.bootexample4.products.repository.ProductRepository;

public class ProductController_getAllProducts_7e38cc05f6_Test {

    @InjectMocks
    ProductController productController;

    @Mock
    private ProductRepository productRepository;

    @BeforeEach
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testGetAllProducts() {
        Product product1 = new Product();
        product1.setName("Product 1");
        product1.setDescription("Description for Product 1");
        product1.setPrice(1.99);

        Product product2 = new Product();
        product2.setName("Product 2");
        product2.setDescription("Description for Product 2");
        product2.setPrice(2.99);

        List<Product> expectedProducts = Arrays.asList(product1, product2);

        when(productRepository.findAll()).thenReturn(expectedProducts);

        List<Product> actualProducts = productController.getAllProducts();

        assertNotNull(actualProducts, "Products list should not be null");
        assertEquals(expectedProducts.size(), actualProducts.size(), "Mismatch in products count");

        for (int i = 0; i < expectedProducts.size(); i++) {
            assertEquals(expectedProducts.get(i).getName(), actualProducts.get(i).getName(), "Mismatch in product name");
            assertEquals(expectedProducts.get(i).getDescription(), actualProducts.get(i).getDescription(), "Mismatch in product description");
            assertEquals(expectedProducts.get(i).getPrice(), actualProducts.get(i).getPrice(), "Mismatch in product price");
        }
    }
}
