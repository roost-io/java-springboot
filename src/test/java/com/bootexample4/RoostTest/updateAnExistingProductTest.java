/*
Test generated by RoostGPT for test newtest using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '    Given there is an existing product with ID 1\r\n' +
    '    And the client provides the following product data:\r\n' +
    '      | name           | description                      | price |\r\n' +
    '      | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '    When the client sends a PUT request to "/api/products/1"\r\n' +
    '    Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

public class UpdateAnExistingProductTest {

    @Test(groups = "restAssured")
    public void updateAnExistingProduct_scenarioTest() {

        // Define base URL
        RestAssured.baseURI = System.getenv("http://localhost:8080");

        // Define headers
        Map<String, Object> headers = new HashMap<>();
        headers.put("Content-Type", "application/json");

        // Define payload
        Map<String, Object> payload = new HashMap<>();
        payload.put("name", "Updated Product");
        payload.put("description", "This is an updated test product.");
        payload.put("price", "15.0");

        // Perform PUT request to the endpoint
        given().
                contentType(ContentType.JSON).
                headers(headers).
                body(payload).
        when().
                put("/api/products/{productId}", 1).
        then().
                assertThat().
                statusCode(200).    // Response should be okay
                body("name", equalTo(payload.get("name"))).     // product name should be as sent in payload
                body("description", equalTo(payload.get("description"))).   // product description should be as sent in payload
                body("price", equalTo(payload.get("price"))).     // product price should be as sent in payload
                log().all();   // Log all results

        // Verify that the product has been updated
        given().pathParam("id", 1).
        when().
                get("/api/products/{id}").
        then().
                assertThat().
                statusCode(200).    // Response should be okay
                body("id", equalTo(1)).   // Response product id should match the updated product id
                body("name", equalTo(payload.get("name"))).     // product name should match the updated product name
                body("description", equalTo(payload.get("description"))).    // product description should match the updated product description
                body("price", equalTo(payload.get("price")));    // product price should match the updated product price
    }
}
