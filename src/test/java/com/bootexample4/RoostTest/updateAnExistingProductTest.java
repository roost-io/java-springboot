/*
Test generated by RoostGPT for test newtest using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '    Given there is an existing product with ID 1\r\n' +
    '    And the client provides the following product data:\r\n' +
    '      | name           | description                      | price |\r\n' +
    '      | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '    When the client sends a PUT request to "/api/products/1"\r\n' +
    '    Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class updateAnExistingProductTest {

    @Before
    public void setUp() {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    public void updateProduct() {
        String payload = "{\n" +
                "  \"name\": \"Updated Product\",\n" +
                "  \"description\": \"This is an updated test product.\",\n" +
                "  \"price\": 15.0\n" +
                "}";

        given().log().all()
                .body(payload)
                .header("Content-Type", "application/json")
                .pathParam("id", "1")
        .when()
                .put("/api/products/{id}")
        .then().log().all()
                .statusCode(200)
                .body("name", equalTo("Updated Product"))
                .body("description", equalTo("This is an updated test product."))
                .body("price", equalTo(15.0f));
    }
}
// This test will send a PUT request to the endpoint "/api/products/1" with the given payload, where the name, description and price 
// of the product with Id 1 is updated. After the request, the assertion checks that the name, description and price values 
// in the response body match the values provided in the payload, indicating that the product was successfully updated.
